name: Build with PyInstaller

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.13']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        # Install your project dependencies if requirements.txt exists
        if [[ -f requirements.txt ]]; then
          pip install -r requirements.txt
        else
          echo "No requirements.txt found, skipping dependency installation"
        fi

    - name: Build with PyInstaller using build.py
      run: |
        python build.py ${{ matrix.python-version }}

    - name: Test executable (Linux)
      if: runner.os == 'Linux'
      run: |
        ./dist/audio2text-linux-${{ matrix.python-version }} --help || echo "Help not available, but executable exists"

    - name: Test executable (Windows)
      if: runner.os == 'Windows'
      run: |
        .\dist\audio2text-windows-${{ matrix.python-version }}.exe --help || echo "Help not available, but executable exists"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: builds-${{ matrix.os }}-python${{ matrix.python-version }}
        path: |
          dist/
          *.spec
        retention-days: 30

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Display structure of downloaded files
      run: ls -la artifacts/

    - name: Upload binaries to release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          artifacts/builds-*/dist/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}